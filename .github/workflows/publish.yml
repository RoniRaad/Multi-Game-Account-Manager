name: Publish ClickOnce

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events
  push:
    branches: 
      - 'master'
      - 'experimental'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  check:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.check_step.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get current branch
        id: check_step
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch=${raw##*/}
          echo "::set-output name=branch::$branch"
          echo "Branch is $branch."
          
  build:
    needs: check 
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with: 
          dotnet-version: 6.0.x
          
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.1
          
      - name: Restore dependencies
        run: dotnet restore -m

        # Runs a single command using the runners shell
      - name: Publish
        run: |
          cd AccountManager.UI
          msbuild /t:publish /p:PublishProfile=Properties\PublishProfiles\ClickOnceProfile.pubxml /p:PublishDir=../publish /p:PublishUrl=../publish /p:InstallUrl=https://raw.githubusercontent.com/RoniRaad/Multi-Game-Account-Manager/${{needs.check.outputs.branch}}/publish/ /p:UpdateUrl=https://raw.githubusercontent.com/RoniRaad/Multi-Game-Account-Manager/${{needs.check.outputs.branch}}/publish/
        
      - name: Get Newest Version
        id: get_version
        run: |
          $versionFolder = $((gci ".\\publish\\Application Files" | ? { $_.PSIsContainer } | sort Name)[-1].Name)
          Write-Output "::set-output name=latest::$($versionFolder.Split('_')[1..4] -join ".")"
          Write-Output "::set-output name=latestunmodified::$($versionFolder)"
        
      - name: Mage 1
        shell: cmd
        run: |
          cd "publish\\Application Files\\${{ steps.get_version.outputs.latestunmodified }}"
          ..\\..\\..\\redist\\mage.exe -New Application -Processor msil -ToFile Multi-Account-Manager.exe.manifest -name 'Multi-Account-Manager' -Version "${{ steps.get_version.outputs.latest }}" -FromDirectory .
        
      - name: Mage 2
        shell: cmd
        run: |
          cd "publish"
          ..\\redist\\mage.exe -New Deployment -Processor msil -Install true -Publisher "RoniRaad" -ProviderUrl "https://raw.githubusercontent.com/RoniRaad/Multi-Game-Account-Manager/${{needs.check.outputs.branch}}/publish/Multi-Account-Manager.application" -AppManifest "Application Files\\${{ steps.get_version.outputs.latestunmodified }}\\Multi-Account-Manager.exe.manifest" -ToFile Multi-Account-Manager.application
      
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Published last commit.
